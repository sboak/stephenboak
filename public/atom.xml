<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Stephen Boak - Blog</title>
 <link href="http://blog.stephenboak.com/atom.xml" rel="self"/>
 <link href="http://blog.stephenboak.com/"/>
 <updated>2012-06-16T14:40:07-07:00</updated>
 <id>http://blog.stephenboak.com/</id>
 <author>
   <name>Stephen Boak</name>
   <email>stephen.boak@gmail.com</email>
 </author>
 
 <entry>
   <title>Tutorial: Network Flow Visualizations With Directed Edges in D3</title>
   <link href="http://blog.stephenboak.com/2012/06/15/d3-flow-vis-tutorial.html"/>
   <updated>2012-06-15T00:00:00-07:00</updated>
   <id>http://blog.stephenboak.com/2012/06/15/d3-flow-vis-tutorial</id>
   <content type="html">&lt;link href=&quot;/css/06.2012.flow-viz.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
&lt;h1&gt;&lt;a href=&quot;/2012/06/15/d3-flow-vis-tutorial.html&quot;&gt;Tutorial: Network Flow Visualizations With Directed Edges in D3&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Back in May I posted some network visualization experiments we did at Boundary to the &lt;a href=&quot;http://blog.boundary.com/2012/05/14/visualizing-network-flow-data/&quot; target=&quot;_blank&quot;&gt;Boundary Blog&lt;/a&gt;. This is the companion post walking through the code and showing you how we made them.&lt;/p&gt;
&lt;p&gt;In total we made 4 of these experiments. Since much of the &lt;strong&gt;code repeats across experiments&lt;/strong&gt; I&amp;#8217;ll walk through the general setup and then the specifics of each experiment&lt;/p&gt;
&lt;h2&gt;General Setup&lt;/h2&gt;
&lt;p&gt;All of these experiments use the same base of &lt;strong&gt;draggable circles&lt;/strong&gt;, shown here:&lt;br /&gt;
&lt;div class=&quot;flow-viz-container&quot; id=&quot;viz0&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;First, I randomly generate the circle positions:&lt;/p&gt;
&lt;pre&gt;var width = 600,
    height = 300;
var radius = 25; /* radius of circles */
var numCircles = 6; /* number of circles to make */
/* array of random x,y coords for circles, away from edges */
var circles = d3.range(numCircles).map(function(i, d) {
  return [
    Math.round(50 + (i/numCircles)*(width - 50)),
    Math.round(30 + Math.random()*(height - 80))
  ];
});&lt;/pre&gt;
&lt;p&gt;After creating the &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; element, and a group to contain the circles, I append the circles to the new group.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using a jQuery each statement to iterate through the circle position array and append a circle for each item. D3 &lt;a href=&quot;http://mbostock.github.com/d3/tutorial/circle.html#binding_data&quot; target=&quot;_blank&quot;&gt;data binding&lt;/a&gt; would handle this really well, but I&amp;#8217;m not really concerned with data binding here and I wanted a quick way to give each circle a unique ID to handle the links between circles (described later):&lt;/p&gt;
&lt;pre&gt;$.each(circles, function(i, d) {
  g_circles.append(&quot;circle&quot;)
    .attr('filter', 'url(#dropShadow)')
    .attr(&quot;class&quot;,&quot;circle&quot;)
    .attr(&quot;id&quot;, &quot;zerocircle&quot; + i)
    .attr(&quot;r&quot;, radius)
    .attr(&quot;cx&quot;, d[0])
    .attr(&quot;cy&quot;, d[1])
    .call(drag);
});&lt;/pre&gt;
&lt;p&gt;Note that the last line of this operation calls the &amp;#8220;drag&amp;#8221; function, which handles&amp;#8230;you guessed it, dragging the circles. It&amp;#8217;s a &lt;a href=&quot;https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag&quot; target=&quot;_blank&quot;&gt;built-in d3 behavior&lt;/a&gt;, but you still need to tell it what to do when it sees dragging, which in my case is to call the &amp;#8220;dragmove&amp;#8221; function:&lt;/p&gt;
&lt;pre&gt;var drag = d3.behavior.drag()
.origin(Object)
.on(&quot;drag&quot;, function(){ dragmove(this); });&lt;/pre&gt;
&lt;p&gt;&amp;#8220;dragmove&amp;#8221; simply handles the positions of the circles, checking against the borders of the &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; element to make sure the circles don&amp;#8217;t disappear:&lt;/p&gt;
&lt;pre&gt;function dragmove(dragged) {
  var x = d3.select(dragged).attr(&quot;cx&quot;);
  var y = d3.select(dragged).attr(&quot;cy&quot;);
  d3.select(dragged)
    .attr(&quot;cx&quot;, Math.max(radius, Math.min(width - radius,
    +x + d3.event.dx)))
    .attr(&quot;cy&quot;, Math.max(radius, Math.min(height - radius,
    +y + d3.event.dy)));
}&lt;/pre&gt;
&lt;h2&gt;Scales and Links&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m using two D3 helper functions to handle the color and interpolation of the line elements. The first is a &lt;a href=&quot;https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-line&quot; target=&quot;_blank&quot;&gt;line generator&lt;/a&gt; with linear interpolation (to create a line from an array of points I pass it) and the second is a &lt;a href=&quot;https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolateRgb&quot; target=&quot;_blank&quot;&gt;color interpolator&lt;/a&gt; to handle coloring the path between a low and high color value.&lt;/p&gt;
&lt;p&gt;For all of the experiments I use an array of link objects to create the paths. Each link object contains the source and target IDs for the circles it connects and a randomly-generated strength value determining the thickness and color of the link.&lt;/p&gt;
&lt;pre&gt;/* line generator with linear interpolation */
var d3LineLinear = d3.svg.line().interpolate(&quot;linear&quot;);
/* color range for flow lines */ 
var d3color = d3.interpolateRgb(&quot;#444&quot;, &quot;#999&quot;);
/* array of links between circles */
var links = [
  {source: 0, target: 5, strength: Math.round(Math.random()*10)},
  {source: 0, target: 2, strength: Math.round(Math.random()*10)},
  {source: 1, target: 3, strength: Math.round(Math.random()*10)},
  {source: 2, target: 4, strength: Math.round(Math.random()*10)},
  {source: 3, target: 5, strength: Math.round(Math.random()*10)},
  {source: 5, target: 0, strength: Math.round(Math.random()*10)},
  {source: 2, target: 0, strength: Math.round(Math.random()*10)},
  {source: 3, target: 1, strength: Math.round(Math.random()*10)}
];&lt;/pre&gt;
&lt;p&gt;The 4 experiments can be broken into two categories: &lt;strong&gt;straight edges&lt;/strong&gt; and &lt;strong&gt;curved edges&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Straight Edges&lt;/h2&gt;
&lt;p&gt;We attempted straight edges using arrows and tapers. In the diagram, the labels show source/destination sides and the &lt;strong&gt;order that the points are drawn&lt;/strong&gt; in:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flow-diagram1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using D3&amp;#8217;s data binding on the flow lines, appending a new path to the g_lines group for each element in the links array. I&amp;#8217;m scaling the color using the D3 helper function. The most important bit is the &lt;strong&gt;drawCurve function&lt;/strong&gt;, which is really the only thing that changes from one example to the next and is used to draw the path outline, &lt;strong&gt;the &amp;#8220;d&amp;#8221; attribute&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;g_lines.selectAll(&quot;.link_line&quot;).data(links).enter().append(&quot;path&quot;)
  .attr(&quot;class&quot;, &quot;link_line&quot;)
  .attr(&quot;fill&quot;, function(d) { return d3color(color_scale(d.strength)); })
  .attr(&quot;id&quot;, function(i, d) { return &quot;link_line&quot; + d; } )
  .attr(&quot;d&quot;, function(d){ return drawCurve(d) });&lt;/pre&gt;
&lt;h3&gt;Arrows&lt;/h3&gt;
&lt;div class=&quot;flow-viz-container&quot; id=&quot;viz1&quot;&gt;&lt;/div&gt;
&lt;p&gt;Source code available on &lt;a href=&quot;http://jsfiddle.net/stephenboak/RKm7g/&quot; target=&quot;_blank&quot;&gt;JSFiddle&lt;/a&gt; and as a &lt;a target=&quot;_blank&quot; href=&quot;http://bl.ocks.org/2942506&quot;&gt;Gist&lt;/a&gt; on bl.ocks.org.&lt;/p&gt;
&lt;p&gt;At the beginning the of the &lt;strong&gt;drawCurve function&lt;/strong&gt; I establish 6 variables: the source and destination X&amp;amp;Y coordinates, the slope between the source/target points, and the slope plus 90degrees, which is used to calculate offsets perpendicular to the angle between the two points. Then it&amp;#8217;s pretty much calculating the coordinates of the 5 points of the arrow:&lt;/p&gt;
&lt;pre&gt;var arrowOffset = 20;
var points = [];
points.push([
  sourceX + radius*Math.cos(slope) - strength_scale(d.strength) * Math.cos(slopePlus90), 
  sourceY + radius*Math.sin(slope) - strength_scale(d.strength) * Math.sin(slopePlus90)
]);
points.push([
  sourceX + radius*Math.cos(slope), 
  sourceY + radius*Math.sin(slope)
]);
points.push([
  targetX - radius*Math.cos(slope), 
  targetY - radius*Math.sin(slope)
]);
points.push([
  targetX - (radius+arrowOffset)*Math.cos(slope) - strength_scale(d.strength + (arrowOffset/2)) * Math.cos(slopePlus90), 
  targetY - (radius+arrowOffset)*Math.sin(slope) - strength_scale(d.strength + (arrowOffset/2)) * Math.sin(slopePlus90)
]);
points.push([
  targetX - (radius+arrowOffset)*Math.cos(slope) - strength_scale(d.strength) * Math.cos(slopePlus90), 
  targetY - (radius+arrowOffset)*Math.sin(slope) - strength_scale(d.strength) * Math.sin(slopePlus90)
]);&lt;/pre&gt;
&lt;p&gt;Without getting into a trig lesson, I&amp;#8217;m using the strength_scale function to calculate a thickness for the path, which determines how far point 2 is from point 1. There&amp;#8217;s also an &lt;strong&gt;arrowOffset&lt;/strong&gt; value of 20px which sets the thickness of the arrowhead. I&amp;#8217;m also offsetting all points by the radius of the circle so the lines don&amp;#8217;t clip the circles.&lt;/p&gt;
&lt;h3&gt;Tapers, Joined&lt;/h3&gt;
&lt;div class=&quot;flow-viz-container&quot; id=&quot;viz2&quot;&gt;&lt;/div&gt;
&lt;p&gt;Source code available on &lt;a href=&quot;http://jsfiddle.net/stephenboak/zJxJ7/&quot; target=&quot;_blank&quot;&gt;JSFiddle&lt;/a&gt; and as a &lt;a target=&quot;_blank&quot; href=&quot;http://bl.ocks.org/2942542&quot;&gt;Gist&lt;/a&gt; on bl.ocks.org.&lt;/p&gt;
&lt;h3&gt;Tapers, Separated&lt;/h3&gt;
&lt;div class=&quot;flow-viz-container&quot; id=&quot;viz3&quot;&gt;&lt;/div&gt;
&lt;p&gt;Source code available on &lt;a href=&quot;http://jsfiddle.net/stephenboak/wEeMz/&quot; target=&quot;_blank&quot;&gt;JSFiddle&lt;/a&gt; and as a &lt;a target=&quot;_blank&quot; href=&quot;http://bl.ocks.org/2942556&quot;&gt;Gist&lt;/a&gt; on bl.ocks.org.&lt;/p&gt;
&lt;p&gt;Note that in all of these examples, the drawCurve function returns the result of the D3 line generator on the array of points, plus a &amp;#8220;Z&amp;#8221; appended to the end. The line generator actually returns a string representing the path coordinates. &lt;strong&gt;Appending a &amp;#8220;Z&amp;#8221; to the end tells the &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; to close the path&lt;/strong&gt; and connect the last point back to the first:&lt;/p&gt;
&lt;pre&gt;return d3LineLinear(points) + &quot;Z&quot;;&lt;/pre&gt;
&lt;h2&gt;Curved Edges&lt;/h2&gt;
&lt;p&gt;The order you draw your points is critical to getting the curved edges to render properly with basis interpolation. What you &lt;strong&gt;don&amp;#8217;t want&lt;/strong&gt; is a curve along the edge of the two source points at the left.  If you make these two points the first and last in the set (1 &amp;amp; 6) you can utilize the &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; path closing (the &amp;#8220;Z&amp;#8221; appended to the path string) to close the path without basis interpolation. You also need to &lt;strong&gt;draw the target point twice&lt;/strong&gt; to avoid interpolation there:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flow-diagram2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Aside from that, you&amp;#8217;re basically introducing two new points to the tapered path above &amp;#8211; two midpoints that are offset by a parameter I&amp;#8217;ve set to 1/10th of the total line length here (so the offset/curve gets bigger the further away the two circles are):&lt;/p&gt;
&lt;div class=&quot;flow-viz-container&quot; id=&quot;viz4&quot;&gt;&lt;/div&gt;
&lt;p&gt;Source code available on &lt;a href=&quot;http://jsfiddle.net/stephenboak/efSxc/&quot; target=&quot;_blank&quot;&gt;JSFiddle&lt;/a&gt; and as a &lt;a target=&quot;_blank&quot; href=&quot;http://bl.ocks.org/2942559&quot;&gt;Gist&lt;/a&gt; on bl.ocks.org.&lt;/p&gt;
&lt;pre&gt;/* percentage of line line to offset curves */
var offsetScale = 0.1;
/* basis interpolation rather than linear */
var d3LineBasis = d3.svg.line().interpolate(&quot;basis&quot;);
...
var MP1X = halfX + (offsetScale * lineLength + strength_scale(d.strength)/2) * Math.cos(slopePlus90);
var MP1Y = halfY + (offsetScale * lineLength + strength_scale(d.strength)/2) * Math.sin(slopePlus90);
var MP2X = halfX + (offsetScale * lineLength - strength_scale(d.strength)/2) * Math.cos(slopePlus90);
var MP2Y = halfY + (offsetScale * lineLength - strength_scale(d.strength)/2) * Math.sin(slopePlus90);
...
var points = [];
points.push([(sourceX - strength_scale(d.strength) * Math.cos(slopePlus90)),
(sourceY - strength_scale(d.strength) * Math.sin(slopePlus90))]);
points.push([MP2X,MP2Y]);
points.push(([(targetX  + radius * Math.cos(slope)),
(targetY + radius * Math.sin(slope))]));
points.push(([(targetX  + radius * Math.cos(slope)),
(targetY + radius * Math.sin(slope))]));
points.push([MP1X, MP1Y]);
points.push([(sourceX + strength_scale(d.strength) * Math.cos(slopePlus90)),
(sourceY + strength_scale(d.strength) * Math.sin(slopePlus90))]);&lt;/pre&gt;
&lt;p&gt;Don&amp;#8217;t hesitate to contact me with any questions or feedback.&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/flow-viz0.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/flow-viz1.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/flow-viz2.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/flow-viz3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/flow-viz4.js&quot;&gt;&lt;/script&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>Visualizing My First Marathon</title>
   <link href="http://blog.stephenboak.com/2012/05/18/marathon.html"/>
   <updated>2012-05-18T00:00:00-07:00</updated>
   <id>http://blog.stephenboak.com/2012/05/18/marathon</id>
   <content type="html">&lt;link href=&quot;/css/marathon.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot;
src=&quot;http://maps.googleapis.com/maps/api/js?key=AIzaSyBrKq4GUqLs_gpnvOfm9vYT0MkbJMnTCWI&amp;sensor=false&quot;&gt;
&lt;/script&gt;&lt;h1&gt;&lt;a href=&quot;/2012/05/18/marathon.html&quot;&gt;Visualizing My First Marathon&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/brooke_n_me.png&quot; style=&quot;display: block;float:right;width:200px;height:200px;border:10px solid #262626;margin:15px;-webkit-transform: rotate(-2deg); -moz-transform: rotate(-2deg);&quot; /&gt;&lt;br /&gt;
Back in October I ran my first marathon with my girlfriend Brooke. There are plenty of articles with training programs and tips for runners, but I&amp;#8217;m a dataviz geek and to me this was an opportunity to collect and play with some really interesting data. I tracked all of our runs using the &lt;a href=&quot;http://itunes.apple.com/us/app/nike+-gps/id387771637?mt=8&quot;&gt;Nike+ app&lt;/a&gt; on my iPhone, and I&amp;#8217;m sharing the data to show what the training really looked like.&lt;/p&gt;
&lt;h2&gt;Overall Stats&lt;/h2&gt;
&lt;table class=&quot;data_block&quot;&gt;
	&lt;tr&gt;
		&lt;th colspan=&quot;2&quot;&gt;Training Time &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;h3&gt;59&lt;/h3&gt;days &lt;/td&gt;
		&lt;td&gt; &lt;h3&gt;8.5&lt;/h3&gt;weeks &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;data_block&quot;&gt;
	&lt;tr&gt;
		&lt;th colspan=&quot;2&quot;&gt;Runs &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;h3&gt;25&lt;/h3&gt;total &lt;/td&gt;
		&lt;td&gt; &lt;h3&gt;2.9&lt;/h3&gt; per week &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;data_block&quot;&gt;
	&lt;tr&gt;
		&lt;th colspan=&quot;2&quot;&gt;Miles &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;h3&gt;254&lt;/h3&gt;total &lt;/td&gt;
		&lt;td&gt; &lt;h3&gt;10.2&lt;/h3&gt;per run &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We decided to allot &lt;strong&gt;about 2 months to training&lt;/strong&gt;. Looking back 25 runs doesn&amp;#8217;t sound like a lot, but we were running every other day &amp;#8211; and 250 miles is about the distance from San Francisco to San Lius Obispo.&lt;/p&gt;
&lt;h2&gt;Training Runs by Week&lt;/h2&gt;
&lt;section id=&quot;byweek&quot;&gt;
&lt;div id=&quot;run_histogram&quot;&gt;&lt;/div&gt;
&lt;p&gt;The graph illustrates our training program pretty well. A few trends are visible:&lt;/p&gt;
&lt;h3&gt;Weekday runs didn&amp;#8217;t change that much&lt;/h3&gt;
&lt;p&gt;Weekday runs were either 6-9 or 8-12 miles (one of each per week). Closer to the race, when the morning runs reached 90 minutes, there were some very early mornings and, as a result, very early nights.&lt;/p&gt;
&lt;h3&gt;One long run per weekend&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;dashed lines on the chart mark Sundays&lt;/strong&gt;. We only did one long run (here I define long as &amp;gt;15miles) per week, and since they reach 20-21 miles and we needed &lt;strong&gt;3 or 4 hours&lt;/strong&gt; to do them there really wasn&amp;#8217;t any other option.&lt;/p&gt;
&lt;h3&gt;Taper the last week&lt;/h3&gt;
&lt;p&gt;We tapered our runs down during the last week or two, doing shorter distances all the way up til the day before the race, but still ran about every other day.&lt;/p&gt;
&lt;/section&gt;
&lt;h2&gt;Run Locations&lt;/h2&gt;
&lt;p&gt;We were out of town for a few training runs but all of the local runs are plotted on the map:&lt;/p&gt;
&lt;div id=&quot;run_container&quot;&gt;
&lt;div class=&quot;active&quot; id=&quot;run_controls&quot;&gt;
  &lt;div class=&quot;run_step&quot; id=&quot;step_prev&quot;&gt;&amp;larr;&lt;/div&gt;
  &lt;div class=&quot;run_step&quot; id=&quot;step_next&quot;&gt;&amp;rarr;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;run_map&quot; style=&quot;width:630px; height:400px;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;run_distance&quot;&gt;0.0mi&lt;/div&gt;
&lt;p&gt;&lt;small&gt;You can also use left/right arrows to view runs&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Again, some trends that you can spot here:&lt;/p&gt;
&lt;h3&gt;Avoiding Stoplights and Traffic&lt;/h3&gt;
&lt;p&gt;Stopping mid-run can really throw off your concentration and cadence, especially on longer runs. We went to great lengths to avoid stoplights and traffic, finding routes through parks, along waterways, and anywhere we&amp;#8217;d avoid having to stop.&lt;/p&gt;
&lt;h3&gt;Emergent Running Patterns&lt;/h3&gt;
&lt;p&gt;For a range of distances we&amp;#8217;d have go-to locations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For &lt;strong&gt;short runs&lt;/strong&gt; (&amp;lt;8mi) we found loops starting from our front door that got us back home easily&lt;/li&gt;
	&lt;li&gt;For &lt;strong&gt;middle-distance distance&lt;/strong&gt; (10-15mi) we&amp;#8217;d go through parks, along the water, etc&amp;#8230;but still try to start and finish near home&lt;/li&gt;
	&lt;li&gt;For the &lt;strong&gt;longest runs&lt;/strong&gt; (&amp;gt;15mi) we planned specific routes that weren&amp;#8217;t as convenient – anywhere we could fine flat stretches of road/trail that wouldn&amp;#8217;t mess up our flow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class=&quot;race_pic&quot; src=&quot;/images/race_day2.png&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Race Day&lt;/h2&gt;
&lt;p&gt;We were both aware of what happens on race day – excitement, thousands of people around, and weeks of training culminating in a single event. I still made &lt;strong&gt;the biggest rookie mistake&lt;/strong&gt; – fast out of the gate, and all downhill from there:&lt;/p&gt;
&lt;h3&gt;&lt;del&gt;Fail&lt;/del&gt; Pace by Mile&lt;/h3&gt;
&lt;div id=&quot;race_pace&quot; style=&quot;clear:both;float:none;&quot;&gt;&lt;/div&gt;
&lt;table class=&quot;data_block&quot;&gt;
	&lt;tr&gt;
		&lt;th colspan=&quot;2&quot;&gt;Start Pace &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;h3&gt;7.5&lt;/h3&gt;&lt;span class=&quot;caps&quot;&gt;MPH&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; &lt;h3&gt;8&lt;/h3&gt;Min/Mile &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;data_block&quot;&gt;
	&lt;tr&gt;
		&lt;th colspan=&quot;2&quot;&gt;End Pace &lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;h3&gt;5.5&lt;/h3&gt;&lt;span class=&quot;caps&quot;&gt;MPH&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; &lt;h3&gt;11&lt;/h3&gt;Min/Mile &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At mile 1 my pace was about 7.5MPH (8-minute miles) but by the end of the race was down to 5.5MPH (11-minute miles). Aside from a few downhill sections of the course (and the spikes every 5 miles as I dashed toward approaching aid stations to suck down more Gatorade) &lt;strong&gt;my pace never increased&lt;/strong&gt;. My race time was &lt;strong&gt;a little over 4 hours&lt;/strong&gt; and there was a full 3 days of recovery afterward.&lt;/p&gt;
&lt;h2&gt;Colophon&lt;/h2&gt;
&lt;p&gt;This post was made using the following tools:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Data Collection&lt;/strong&gt; – iPhone 4 and the &lt;a href=&quot;http://itunes.apple.com/us/app/nike+-gps/id387771637?mt=8&quot;&gt;Nike+ app&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Bar &amp;amp; Line Graphs&lt;/strong&gt; – Made with &lt;a href=&quot;http://d3js.org/&quot;&gt;D3&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt; – Made with &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/&quot;&gt;Google Maps &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; V3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/marathon.js&quot;&gt;&lt;/script&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>Kindle Highlights: 'The China Study'</title>
   <link href="http://blog.stephenboak.com/2012/04/21/kindle-highlights-china-study.html"/>
   <updated>2012-04-21T00:00:00-07:00</updated>
   <id>http://blog.stephenboak.com/2012/04/21/kindle-highlights-china-study</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2012/04/21/kindle-highlights-china-study.html&quot;&gt;Kindle Highlights: &amp;#8216;The China Study&amp;#8217;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I recently read &lt;a href=&quot;http://www.amazon.com/dp/B0041D843M/&quot;&gt;The China Study&lt;/a&gt; by T. Colin Campbell and it had a profound effect on me. I&amp;#8217;m not going to editorialize, but one of the great features of the Kindle is its ability to capture and &lt;a href=&quot;https://kindle.amazon.com/work/the-china-study-comprehensive-ebook/B000B0V5MG/B0041D843M?all=0&quot;&gt;store highlighted passeges and notes&lt;/a&gt;. Here are some of mine:&lt;/p&gt;
&lt;h2&gt;On Animal-Based Foods and Animal vs. Plant Protein&amp;#8230;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In fact, dietary protein proved to be so powerful in its effect that we could turn on and turn off cancer growth simply by changing the level consumed&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What protein consistently and strongly promoted cancer? Casein, which makes up 87% of cow’s milk protein, promoted all stages of the cancer process. What type of protein did not promote cancer, even at high levels of intake? The safe proteins were from plants, including wheat and soy&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;people who ate the most animal-based foods got the most chronic disease. Even relatively small intakes of animal-based food were associated with adverse effects&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Guess what happened when both sets of rats had an opportunity to voluntarily use exercise wheels? Those fed the low-animal protein diet exercised substantially more, with less fatigue, than those fed the type of diet that most of us eat. This was the same effect observed by these world-class athletes&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;People, for example, who choose to consume a plant-based diet will often ask, even today, “Where do I get my protein?” as if plants don’t have protein&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;On &amp;#8216;Diseases of Affluence&amp;#8217;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;the children who got liver cancer were from the best-fed families. The families with the most money ate what we thought were the healthiest diets, the diets most like our own meaty American diets&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When these diseases were cross-listed in a way that allowed every disease rate to be compared with every other disease rate, two groups of diseases emerged: those typically found in more economically developed areas (diseases of affluence) and those typically found in rural agricultural areas (diseases of poverty)&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As blood cholesterol levels in rural China rose in certain counties, the incidence of “Western” diseases also increased. What made this so surprising was that Chinese levels were far lower than we had expected. The average level of blood cholesterol was only 127 mg/dL, which is almost 100 points less than the American average (215 mg/dL)!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As blood cholesterol levels decreased from 170 mg/dL to 90 mg/dL, cancers of the liver,II rectum,I colon,II male lung,I female lung, breast, childhood leukemia, adult leukemia,I childhood brain, adult brain,I stomach and esophagus (throat) decreased&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;the death rate from coronary heart disease was seventeen times higher among American men than rural Chinese men&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;During a three-year observation period (1973-1975), there was not one single person who died of &lt;span class=&quot;caps&quot;&gt;CHD&lt;/span&gt; (coronary heart disease) before the age of sixty-four, among 246,000 men in a Guizhou county and 181,000 women in a Sichuan county!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;On Fiber, Antioxidants, and the &amp;#8216;Symphony&amp;#8217; of Health Benefits from Plant-based Foods&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dietary fiber is exclusively found in plant-based foods. This material, which gives rigidity to the cell walls of plants, comes in thousands of different chemical variations. It is mostly made of highly complex carbohydrate molecules. We digest very little or no fiber. Nonetheless, fiber, having few or no calories itself, helps dilute the caloric density of our diets, creates a sense of fullness and helps to shut down appetite, among other things. In doing so, it satisfies our hunger and minimizes the overconsumption of calories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The colors of fruits and vegetables are derived from a variety of chemicals called antioxidants. These chemicals are almost exclusively found in plants. They are only present in animal-based foods to the extent that animals eat them and store a small amount in their own tissues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As we are not plants, we do not carry out photosynthesis and therefore do not produce any of our own antioxidants. Fortunately the antioxidants in plants work in our bodies the same way they work in plants. It is a wonderful harmony.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In other words, can a pill containing vitamin C and beta-carotene or a fiber supplement create these health effects? No. The triumph of health lies not in the individual nutrients, but in the whole foods that contain those nutrients: plant-based foods. In a bowl of spinach salad, for example, we have fiber, antioxidants and countless other nutrients that are orchestrating a wondrous symphony of health as they work in concert within our bodies. The message could not be simpler: eat as many whole fruits, vegetables and whole grains as you can, and you will probably derive all of the benefits noted above as well as many others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;On Coronary Heart Disease (&lt;span class=&quot;caps&quot;&gt;CHD&lt;/span&gt;) and the Advancement of Surgery&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Researchers noted that men with cholesterol levels “over 244 mg/dL (milligrams per deciliter) have more than three times the incidence of &lt;span class=&quot;caps&quot;&gt;CHD&lt;/span&gt; (coronary heart disease) as do those with cholesterol levels less than 210 mg/dL.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;American men died from heart disease at a rate almost seventeen times higher than their Chinese counterparts&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;Japanese men who live in Hawaii or California have a much higher blood cholesterol level and incidence of coronary heart disease than Japanese men living in Japan&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The ultimate surgery, of course, is the heart transplant, which even utilizes an artificial heart on occasion. We also have a procedure that doesn’t require cracking the chest plate open, called coronary angioplasty, where a small balloon is inflated in a narrowed, diseased artery, squishing the plaque back against the wall, opening up the passage for increased blood flow. We have defibrillators to revive hearts, pacemakers and precise imaging techniques so that we can observe individual arteries without having to expose the heart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some great advances have been made, to be sure, which may account for the fact that our death rate from heart disease is a full 58% lower than what it was in 1950.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In fact, the incidence rate (not death rate) for heart disease29 is about the same as it was in the early 1970s. In other words, while we don’t die as much from heart disease, we still get it as often as we used to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These highlights represent less than half of the book. In the second half there is further discussion of specific diseases, and details of the powerful ties between the food industry and government. The book was also adapted into a documentary called &lt;a href=&quot;http://www.forksoverknives.com/&quot;&gt;Forks Over Knives&lt;/a&gt; which makes an equally strong case with some really compelling imagery. Look for it on Netflix Instant.&lt;/p&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>Appearance on 'Thought You Should See This'</title>
   <link href="http://blog.stephenboak.com/2011/11/10/thought-you-should-see-this.html"/>
   <updated>2011-11-10T00:00:00-08:00</updated>
   <id>http://blog.stephenboak.com/2011/11/10/thought-you-should-see-this</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2011/11/10/thought-you-should-see-this.html&quot;&gt;Appearance on &amp;#8216;Thought You Should See This&amp;#8217;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I was honored when &lt;a href=&quot;http://twitter.com/#!/helenwalters&quot;&gt;Helen Walters&lt;/a&gt; contacted me to say that she was impressed by the Boundary Logo and wanted to ask me a few questions about it. The resulting interview appeared on her blog, &lt;a href=&quot;http://www.thoughtyoushouldseethis.com/post/12600120652/eye-on-identity-design-boundary&quot;&gt;Thought You Should See This&lt;/a&gt;.&lt;/p&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>CSS3 Radios and Checkboxes</title>
   <link href="http://blog.stephenboak.com/2011/08/23/css3-radios-checks.html"/>
   <updated>2011-08-23T00:00:00-07:00</updated>
   <id>http://blog.stephenboak.com/2011/08/23/css3-radios-checks</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2011/08/23/css3-radios-checks.html&quot;&gt;CSS3 Radios and Checkboxes&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Restyling form elements is usually pretty painful, requiring javascript and some ugly &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; &amp;#8211; so when I stumbled across this solution the other day I was impressed:&lt;/p&gt;
&lt;div class=&quot;css3_menu&quot;&gt;
  &lt;label class=&quot;heading&quot;&gt;Radios:&lt;/label&gt;
&lt;div class=&quot;buttonset&quot; id=&quot;display_direction&quot;&gt;
&lt;input type=&quot;radio&quot; name=&quot;option&quot; id=&quot;option1&quot;/&gt;&lt;label for=&quot;option1&quot;&gt;Radio 1&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;option&quot; id=&quot;option2&quot;/&gt;&lt;label for=&quot;option2&quot;&gt;Radio 2&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;option&quot; checked=&quot;checked&quot; id=&quot;option3&quot;/&gt;&lt;label for=&quot;option3&quot;&gt;Radio 3&lt;/label&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css3_menu&quot;&gt;
  &lt;label class=&quot;heading&quot;&gt;Checks:&lt;/label&gt;
&lt;div class=&quot;buttonset&quot; id=&quot;display_direction&quot;&gt;
&lt;input type=&quot;checkbox&quot; name=&quot;check&quot; id=&quot;check1&quot;/&gt;&lt;label for=&quot;check1&quot;&gt;Check 1&lt;/label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;check&quot; id=&quot;check2&quot;/&gt;&lt;label for=&quot;check2&quot;&gt;Check 2&lt;/label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;check&quot; checked=&quot;checked&quot; id=&quot;check3&quot;/&gt;&lt;label for=&quot;check3&quot;&gt;Check 3&lt;/label&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;#8217;s a pure CSS3 override of radio button and checkbox styles &amp;#8211; no javascript, no unnecessary styling or tricks in the markup.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a pretty simple trick &amp;#8211; you just hide the radio button itself and conditionally style its label when selected. In the markup, just make sure each input element has a label associated with it using the &amp;#8220;for&amp;#8221; attribute like so:&lt;/p&gt;
&lt;pre&gt;&amp;lt;input type=&quot;radio&quot; name=&quot;option&quot; id=&quot;option1&quot;/&amp;gt;
&amp;lt;label for=&quot;option1&quot;&amp;gt;Option 1&amp;lt;/label&amp;gt;&lt;/pre&gt;
&lt;p&gt;And use the following &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; to hide the radio button or checkbox and style the label when the input element is &amp;#8220;checked&amp;#8221;:&lt;/p&gt;
&lt;pre&gt;.css3_menu .buttonset input[type=radio], 
.css3_menu .buttonset input[type=checkbox] {
  display: none;
}
.css3_menu .buttonset input[type=radio]:checked + label, 
.css3_menu .buttonset input[type=checkbox]:checked + label {
  background-color: #0FB913;
  color: white;
}&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;ve put the complete example code on &lt;a href=&quot;http://jsfiddle.net/stephenboak/fUVkR/&quot;&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>Easy as (a) Pie</title>
   <link href="http://blog.stephenboak.com/2011/08/07/easy-as-a-pie.html"/>
   <updated>2011-08-07T00:00:00-07:00</updated>
   <id>http://blog.stephenboak.com/2011/08/07/easy-as-a-pie</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2011/08/07/easy-as-a-pie.html&quot;&gt;Easy as (a) Pie&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Through my work at &lt;a href=&quot;http://www.boundary.com/&quot;&gt;Boundary&lt;/a&gt; I&amp;#8217;ve started playing with the &lt;a href=&quot;http://mbostock.github.com/d3/&quot;&gt;D3&lt;/a&gt; visualization library, trying to build some interesting visualizations for our real-time network monitoring dashboard. I&amp;#8217;ve really been enjoying D3 and Mike Bostock, the creator, has been extremely helpful to me and lots of others in the &lt;a href=&quot;http://groups.google.com/group/d3-js&quot;&gt;d3-js Google Group&lt;/a&gt;. Since the library is new, I hope the series of experiments I post here can be helpful in spreading some knowledge and awareness of the library.&lt;/p&gt;
&lt;h2&gt;What You&amp;#8217;re Building&lt;/h2&gt;
&lt;p&gt;My first experiment is an animated pie chart meant to visualize a breakdown of incoming network traffic by port. Here is the completed pie chart:&lt;br /&gt;
&lt;div id=&quot;easy-as-pie-chart&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also posted the complete source code on &lt;a href=&quot;http://jsfiddle.net/stephenboak/hYuPb/&quot;&gt;JSFiddle&lt;/a&gt;. I&amp;#8217;m aware that there are some compatibility issues, both in my code and in the D3 libraries, with older browsers. For now I&amp;#8217;m simply going to hope that you can see everything here correctly.&lt;/p&gt;
&lt;h2&gt;Building the Visualization&lt;/h2&gt;
&lt;p&gt;For the sake of brevity I&amp;#8217;ll skip over some of the details, but feel free to &lt;a href=&quot;mailto:stephen.boak@gmail.com&quot;&gt;contact me&lt;/a&gt; with any questions.&lt;/p&gt;
&lt;p&gt;There are a couple of D3 helper functions that I use. The first is &lt;a href=&quot;https://github.com/mbostock/d3/wiki/Pie-Layout#pie&quot;&gt;pie layout&lt;/a&gt;, which will take an incoming data array and give you back an object with the necessary angle and radius parameters to construct an arc.&lt;/p&gt;
&lt;pre&gt;//D3 helper function to populate pie slice parameters from array data
var donut = d3.layout.pie().value(function(d){
  return d.octetTotalCount;
});&lt;/pre&gt;
&lt;p&gt;The second is a function to return a color value from an &lt;a href=&quot;https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20&quot;&gt;ordinal scale of 20&lt;/a&gt; preset colors:&lt;/p&gt;
&lt;pre&gt;//D3 helper function to create colors from an ordinal scale:
var color = d3.scale.category20();&lt;/pre&gt;
&lt;p&gt;For this demo I&amp;#8217;m using a random number generator to return an object with two keys, port and octetTotalCount, meant to represent the breakdown of bits coming from each port:&lt;/p&gt;
&lt;pre&gt;function fillArray() {
  return {
    port: &quot;port&quot;,
    octetTotalCount: Math.ceil(Math.random()*(arrayRange))
  };
}&lt;/pre&gt;
&lt;p&gt;The next few blocks of code set up the &lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; object, some groups to store content in, and the static content that will display until the first data pulse loads:&lt;/p&gt;
&lt;pre&gt;var vis = d3.select(&quot;#easy-as-pie-chart&quot;).append(&quot;svg:svg&quot;)
  .attr(&quot;width&quot;, w)
  .attr(&quot;height&quot;, h);
  .
  .
  .
  var totalUnits = center_group.append(&quot;svg:text&quot;)
    .attr(&quot;class&quot;, &quot;units&quot;)
    .attr(&quot;dy&quot;, 21)
    .attr(&quot;text-anchor&quot;, &quot;middle&quot;) // text-align: right
    .text(&quot;kb&quot;);&lt;/pre&gt;
&lt;p&gt;Next is the beginning of the update() function, which runs each time new data comes in (here I&amp;#8217;ve set the update function to run every 1500ms). First I generate new random data &amp;#8211; I wanted this visualization to handle varying numbers of ports as well as a large range of incoming values, so both the size and values of the array are variable:&lt;/p&gt;
&lt;pre&gt;function update() {
  arraySize = Math.ceil(Math.random()*10);
  streakerDataAdded = d3.range(arraySize).map(fillArray);&lt;/pre&gt;
&lt;p&gt;The part of the visualization I had the most trouble with was getting the pie slices to animate/tween properly while handling the varying array size and range. First, you need a good understanding of how D3 handles this variation &amp;#8211; a good primer is Mike Bostocks &lt;a href=&quot;http://mbostock.github.com/d3/tutorial/circle.html&quot;&gt;Three Little Circles&lt;/a&gt; tutorial, explaining data binding, as well as the enter() and exit() operations. Below, I&amp;#8217;m updating path arcs whenever data exists, and adding and removing arc segments as needed:&lt;/p&gt;
&lt;pre&gt;//DRAW ARC PATHS
paths = arc_group.selectAll(&quot;path&quot;).data(filteredPieData);
paths.enter().append(&quot;svg:path&quot;)
  .attr(&quot;stroke&quot;, &quot;white&quot;)
  .attr(&quot;stroke-width&quot;, 0.5)
  .attr(&quot;fill&quot;, function(d, i) { return color(i); })
  .transition()
    .duration(tweenDuration)
    .attrTween(&quot;d&quot;, pieTween);
paths
  .transition()
    .duration(tweenDuration)
    .attrTween(&quot;d&quot;, pieTween);
paths.exit()
  .transition()
    .duration(tweenDuration)
    .attrTween(&quot;d&quot;, removePieTween)
  .remove();&lt;/pre&gt;
&lt;p&gt;The tweening of the pie pieces is done through two functions I wrote, one to handle adjustment of sizes (pieTween) and the other to handle removal of pie pieces (removePieTween). The pieTween function looks at the previous angles of each piece and interpolates angles between them. The removePieTween function interpolates between the piece&amp;#8217;s final value and 360° (or 2*Pi radians).&lt;/p&gt;
&lt;p&gt;Nearly identical tweening operations are used for the tick marks and labels of the chart.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;There are a few things I&amp;#8217;m still trying to improve about this chart:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I&amp;#8217;d like to add a piece to the filterData() function that will persist entry position in the array, so that if a particular port is represented through time it&amp;#8217;s position in the array does not change.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;When there are a few small values near each other the labels overlap. I&amp;#8217;d like to add some functionality that will adjust label positions so that the text doesn&amp;#8217;t do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;ve got some ideas on how to make either of these improvements, or any other ideas to improve the visualization (or to represent this data in an even more creative way), I would love to hear from you, as would the rest of the team at &lt;a href=&quot;mailto:jobs@boundary.com&quot;&gt;Boundary&lt;/a&gt;.&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/pie-random.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;window.onload = drawPie;&lt;/script&gt;</content>
   <author>
     <name>Stephen Boak</name>
     <uri>http://www.stephenboak.com</uri>
   </author>
 </entry>
 
</feed>